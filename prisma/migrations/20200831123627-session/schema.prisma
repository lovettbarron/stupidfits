generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id            String    @default(uuid()) @id
  email         String?   @unique
  name          String?
  social        String    @unique
  posts         Post[]
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
}

model Session {
  id                 String    @default(uuid()) @id
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  accessToken        String    @default(cuid()) @unique
  sessionToken       String    @default(cuid()) @unique
  accessTokenExpires DateTime?
  expires            DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())
}

model Account {
  id                 String    @default(uuid()) @id
  compoundId         String    @unique
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  providerId         String
  providerType       String
  providerAccountId  String    @unique
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())
}

model VerificationRequest {
  id         String   @default(uuid()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
}

model Post {
  id        Int     @default(autoincrement()) @id
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  content   String?
  published Boolean @default(false)
  title     String?
  social    Social
}

model Social {
  id         Int      @default(autoincrement()) @id
  platform   Platform
  platformId String
  url        String
  image      String
}

model Fit {
  id         Int     @default(autoincrement()) @id
  post       Post
  photo      String?
  components Item[]  @relation("FitComponent")
  desc       String?
  temp       Item?
}

model Closet {
  id     Int    @default(autoincrement()) @id
  name   String
  grails Item[] @relation("ClosetGrails")
  items  Item[] @relation("ClosetContent")
}

model Brand {
  id   Int     @default(autoincrement()) @id
  name String
  logo String?
  desc String?
}

model Item {
  id       Int      @default(autoincrement()) @id
  type     ItemType
  photo    String?
  brand    Brand
  model    String
  year     Int?
  size     String?
  colour   Colour[]
  Sale     String?
  repair   Boolean?
  qual     Qual?
  grail    Closet?  @relation("ClosetGrails", fields: [grailId], references: [id])
  grailId  Int?
  closet   Closet?  @relation("ClosetContent", fields: [closetId], references: [id])
  closetId Int?
  fit      Fit?     @relation("FitComponent", fields: [fitId], references: [id])
  fitId    Int?
}

enum ItemType {
  BAG
  SHOE
  JACKET
  PANT
  SHIRT
  LAYER
  EXTRA
}

enum Colour {
  aqua
  azure
  beige
  bisque
  blue
  brown
  coral
  crimson
  cyan
  darkred
  dimgray
  gold
  gray
  green
  grey
  hotpink
  indigo
  ivory
  khaki
  lime
  linen
  maroon
  navy
  oldlace
  olive
  orange
  orchid
  peru
  pink
  plum
  purple
  red
  salmon
  sienna
  silver
  skyblue
  snow
  tan
  teal
  thistle
  tomato
  violet
  wheat
  transparent
}

enum Qual {
  WATERPROOF
  BREATHABLE
}

enum Platform {
  INSTAGRAM
}
