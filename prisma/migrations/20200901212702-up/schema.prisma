generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  username      String?

  instagram String? @unique

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Media {
  id          Int    @default(autoincrement()) @id
  insta_id    Int    @unique
  shortcode   String @unique
  timestamp   Int
  image       String
  url         String
  description String
}

model Fit {
  id         Int     @default(autoincrement()) @id
  media      Media
  photo      String?
  components Item[]  @relation("FitComponent")
  desc       String?
  temp       String?
}

model Closet {
  id     Int    @default(autoincrement()) @id
  name   String
  grails Item[] @relation("ClosetGrails")
  items  Item[] @relation("ClosetContent")
}

model Brand {
  id   Int     @default(autoincrement()) @id
  name String
  logo String?
  desc String?
}

model Item {
  id       Int      @default(autoincrement()) @id
  type     ItemType
  photo    String?
  brand    Brand
  model    String
  year     Int?
  size     String?
  colour   Colour[]
  Sale     String?
  repair   Boolean?
  qual     Qual?
  grail    Closet?  @relation("ClosetGrails", fields: [grailId], references: [id])
  grailId  Int?
  closet   Closet?  @relation("ClosetContent", fields: [closetId], references: [id])
  closetId Int?
  fit      Fit?     @relation("FitComponent", fields: [fitId], references: [id])
  fitId    Int?
}

enum ItemType {
  BAG
  SHOE
  JACKET
  PANT
  SHIRT
  LAYER
  EXTRA
}

enum Colour {
  aqua
  azure
  beige
  bisque
  blue
  brown
  coral
  crimson
  cyan
  darkred
  dimgray
  gold
  gray
  green
  grey
  hotpink
  indigo
  ivory
  khaki
  lime
  linen
  maroon
  navy
  oldlace
  olive
  orange
  orchid
  peru
  pink
  plum
  purple
  red
  salmon
  sienna
  silver
  skyblue
  snow
  tan
  teal
  thistle
  tomato
  violet
  wheat
  transparent
}

enum Qual {
  WATERPROOF
  BREATHABLE
}

enum Platform {
  INSTAGRAM
}
