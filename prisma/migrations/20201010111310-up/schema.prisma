generator client {
  provider             = "prisma-client-js"
  experimentalFeatures = ["connectOrCreate"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map(name: "email_verified")
  image            String?
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @default(now()) @map(name: "updated_at")
  username         String?   @unique
  fit              Fit[]     @relation("FitRelation")
  item             Item[]    @relation("ItemRelation")
  closet           Closet[]  @relation("ClosetRelation")
  instagram        String?   @unique
  instagramlong    String?
  instagramrefresh DateTime?
  public           Boolean   @default(true)
  profilepage      Boolean   @default(true)


  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Media {
  id          Int     @id @default(autoincrement())
  insta_id    String  @unique
  username    String?
  shortcode   String  @unique
  timestamp   Int
  image       String
  url         String
  description String
  fit         Fit?    @relation("MediaRelationship", fields: [fitId], references: [id])
  fitId       Int?
}

model Fit {
  id         Int     @id @default(autoincrement())
  media      Media   @relation("MediaRelationship")
  components Item[]  @relation("FitComponent")
  desc       String?
  temp       String?
  user       User?   @relation("FitRelation", fields: [userId], references: [id])
  userId     Int?
}

model Closet {
  id     Int    @id @default(autoincrement())
  name   String
  grails Item[] @relation("ClosetGrails")
  items  Item[] @relation("ClosetContent")
  user   User?  @relation("ClosetRelation", fields: [userId], references: [id])
  userId Int?
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String  @unique
  logo String?
  desc String?
  Item Item[]
}

model Item {
  id       Int      @id @default(autoincrement())
  type     ItemType
  photo    String?
  brand    Brand    @relation(fields: [brandId], references: [id])
  model    String
  year     Int?
  size     String?
  colour   Colour[]
  sale     String?
  archive  Boolean?
  repair   Boolean?
  closet   Closet[] @relation("ClosetContent", fields: [closetId], references: [id])
  closetId Int?
  fit      Fit[]    @relation("FitComponent", fields: [fitId], references: [id])
  fitId    Int?
  user     User?    @relation("ItemRelation", fields: [userId], references: [id])
  userId   Int?
  Closet   Closet?  @relation("ClosetGrails", fields: [closetId], references: [id])
  brandId  Int
}

enum ItemType {
  BAG
  SHOE
  JACKET
  PANT
  SHIRT
  LAYER
  EXTRA
}

enum Colour {
  aqua
  azure
  beige
  bisque
  blue
  brown
  coral
  crimson
  cyan
  darkred
  dimgray
  gold
  gray
  green
  grey
  hotpink
  indigo
  ivory
  khaki
  lime
  linen
  maroon
  navy
  oldlace
  olive
  orange
  orchid
  peru
  pink
  plum
  purple
  red
  salmon
  sienna
  silver
  skyblue
  snow
  tan
  teal
  thistle
  tomato
  violet
  wheat
  transparent
}

enum Qual {
  WATERPROOF
  BREATHABLE
}

enum Platform {
  INSTAGRAM
}
