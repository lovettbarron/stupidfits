generator client {
  provider             = "prisma-client-js"
  experimentalFeatures = ["connectOrCreate"]
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @default(now()) @map(name: "updated_at")
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map(name: "email_verified")
  image            String?
  username         String?   @unique
  fit              Fit[]     @relation("FitRelation")
  item             Item[]    @relation("ItemRelation")
  closet           Closet[]  @relation("ClosetRelation")
  instagram        String?   @unique
  instagramlong    String?
  instagramrefresh DateTime?
  public           Boolean   @default(true)
  profilepage      Boolean   @default(true)
  hideface         Boolean   @default(false)
  defaultStatus    Status    @default(value: PENDING)
  url              String?
  urllabel         String?
  style            String?
  description      String?





  Comment Comment[]
  Media   Media[]   @relation("UserMediaRelationship")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Media {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @default(now()) @map(name: "updated_at")
  insta_id    String?     @unique
  username    String?
  timestamp   Int
  image       String?
  cloudinary  String      @default("")
  export      String?
  censor      String?
  url         String?
  layers      ItemLayer[] @relation("MediaLayer")
  description String
  fit         Fit?        @relation("MediaRelationship", fields: [fitId], references: [id])
  fitId       Int?
  user        User?       @relation("UserMediaRelationship", fields: [userId], references: [id])
  userId      Int?
}

model Fit {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
  media      Media[]   @relation("MediaRelationship")
  components Item[]    @relation("FitComponent")
  desc       String?
  temp       String?
  user       User?     @relation("FitRelation", fields: [userId], references: [id])
  userId     Int?
  status     Status    @default(value: PENDING)
  Comment    Comment[]
  style      Style[]
}

model Closet {
  id     Int    @id @default(autoincrement())
  name   String
  grails Item[] @relation("ClosetGrails")
  items  Item[] @relation("ClosetContent")
  user   User?  @relation("ClosetRelation", fields: [userId], references: [id])
  userId Int?
}

model Brand {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  logo  String?
  desc  String?
  Item  Item[]
  style Style[]
}

model Item {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @default(now()) @map(name: "updated_at")
  type      ItemType
  photo     String?
  brand     Brand       @relation(fields: [brandId], references: [id])
  model     String
  year      Int?
  size      String?
  colour    Colour[]
  sale      String?
  archive   Boolean?
  repair    Boolean?
  closet    Closet[]    @relation("ClosetContent", fields: [closetId], references: [id])
  closetId  Int?
  fit       Fit[]       @relation("FitComponent", fields: [fitId], references: [id])
  fitId     Int?
  user      User?       @relation("ItemRelation", fields: [userId], references: [id])
  userId    Int?
  Closet    Closet?     @relation("ClosetGrails", fields: [closetId], references: [id])
  brandId   Int
  layers    ItemLayer[] @relation("ItemItemLayer")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  fit       Fit      @relation(fields: [fitId], references: [id])
  userId    Int
  fitId     Int
  comment   String
}

model Style {
  id          Int      @id @default(autoincrement())
  description String
  brand       Brand[]  @relation(fields: [brandId], references: [id])
  brandId     Int?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  fit         Fit[]    @relation(fields: [fitId], references: [id])
  fitId       Int?
}

model ItemLayer {
  id      Int    @id @default(autoincrement())
  media   Media? @relation("MediaLayer", fields: [mediaId], references: [id])
  mediaId Int?
  item    Item?  @relation("ItemItemLayer", fields: [itemId], references: [id])
  itemId  Int?
  x       Float
  y       Float
  r       Float

}

enum ItemType {
  BAG
  SHOE
  JACKET
  PANT
  SHIRT
  LAYER
  EXTRA
}

enum Colour {
  aqua
  azure
  beige
  bisque
  blue
  brown
  coral
  crimson
  cyan
  darkred
  dimgray
  gold
  gray
  green
  grey
  hotpink
  indigo
  ivory
  khaki
  lime
  linen
  maroon
  navy
  oldlace
  olive
  orange
  orchid
  peru
  pink
  plum
  purple
  red
  salmon
  sienna
  silver
  skyblue
  snow
  tan
  teal
  thistle
  tomato
  violet
  wheat
  transparent
}

enum Qual {
  WATERPROOF
  BREATHABLE
}

enum Platform {
  INSTAGRAM
}

enum Status {
  PENDING
  PUBLIC
  FEATURED
  REPORTED
}
