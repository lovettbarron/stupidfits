datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
  // experimentalFeatures = ["connectOrCreate"]
}

// datasource db {
//   provider = "postgresql"
//   url = "***"
// }

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @default(now()) @map(name: "updated_at")
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map(name: "email_verified")
  image            String?
  username         String?   @unique
  fit              Fit[]     @relation("FitRelation")
  item             Item[]    @relation("ItemRelation")
  closet           Closet[]  @relation("ClosetRelation")
  instagram        String?   @unique
  instagramlong    String?
  instagramrefresh DateTime?
  public           Boolean   @default(true)
  profilepage      Boolean   @default(true)
  nosize           Boolean   @default(false)
  hideface         Boolean   @default(false)
  hidecloset       Boolean   @default(false)
  defaultStatus    Status    @default(value: PENDING)
  url              String?
  urllabel         String?
  style            String?
  description      String?
  gender           Gender[]
  top              Int[]
  bottom           Int[]
  tags             Style[]

  Comment      Comment[]
  Media        Media[]        @relation("UserMediaRelationship")
  GroupAdmin   Group[]        @relation("adminGroup")
  Group        Group[]        @relation("memberGroup")
  Review       Review[]
  Collection   Collection[]
  Notification Notification[]
  Battle       Battle[]
  BattleVote   BattleVote[]
  BattleJudge  Battle[]       @relation(name: "battleJudges")
  @@map(name: "users")
  Invite Invite[]
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Media {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @default(now()) @map(name: "updated_at")
  insta_id    String?     @unique
  username    String?
  timestamp   Int
  image       String?
  cloudinary  String      @default("")
  export      String?
  censor      String?
  url         String?
  layers      ItemLayer[] @relation("MediaLayer")
  description String
  fit         Fit?        @relation("MediaRelationship", fields: [fitId], references: [id])
  fitId       Int?
  user        User?       @relation("UserMediaRelationship", fields: [userId], references: [id])
  userId      Int?
  Review      Review?     @relation(fields: [reviewId], references: [id])
  reviewId    Int?
}

model Fit {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @default(now()) @map(name: "updated_at")
  media         Media[]         @relation("MediaRelationship")
  components    Item[]          @relation("FitComponent")
  desc          String?
  temp          String?
  user          User?           @relation("FitRelation", fields: [userId], references: [id])
  userId        Int?
  status        Status          @default(value: PENDING)
  Comment       Comment[]
  style         Style[]
  Collection    Collection[]
  BattleMatchup BattleMatchup[]
  BattleVote    BattleVote[]
  Battle        Battle?         @relation(fields: [battleId], references: [id])
  battleId      Int?
}

model Closet {
  id     Int    @id @default(autoincrement())
  name   String
  grails Item[] @relation("ClosetGrails")
  items  Item[] @relation("ClosetContent")
  user   User?  @relation("ClosetRelation", fields: [userId], references: [id])
  userId Int?
}

model Brand {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  logo  String?
  desc  String?
  Item  Item[]
  style Style[]
}

model Item {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @default(now()) @map(name: "updated_at")
  type      ItemType
  photo     String?
  brand     Brand       @relation(fields: [brandId], references: [id])
  model     String
  year      Int?
  size      String?
  colour    Colour[]
  sale      String?
  archive   Boolean?
  repair    Boolean?
  closet    Closet[]    @relation("ClosetContent", fields: [closetId], references: [id])
  closetId  Int?
  fit       Fit[]       @relation("FitComponent", fields: [fitId], references: [id])
  fitId     Int?
  user      User?       @relation("ItemRelation", fields: [userId], references: [id])
  userId    Int?
  Closet    Closet?     @relation("ClosetGrails", fields: [closetId], references: [id])
  brandId   Int
  layers    ItemLayer[] @relation("ItemItemLayer")
  Review    Review?     @relation(fields: [reviewId], references: [id])
  reviewId  Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  fit       Fit?     @relation(fields: [fitId], references: [id])
  userId    Int
  fitId     Int?
  comment   String
  Review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  Int?

  Battle   Battle? @relation(fields: [battleId], references: [id])
  battleId Int?
}

model Style {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  brand       Brand[]      @relation(fields: [brandId], references: [id])
  brandId     Int?
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @default(now()) @map(name: "updated_at")
  fit         Fit[]        @relation(fields: [fitId], references: [id])
  fitId       Int?
  User        User[]
  Review      Review[]
  Collection  Collection[]
  Battle      Battle[]
}

model ItemLayer {
  id      Int    @id @default(autoincrement())
  media   Media? @relation("MediaLayer", fields: [mediaId], references: [id])
  mediaId Int?
  item    Item?  @relation("ItemItemLayer", fields: [itemId], references: [id])
  itemId  Int?
  x       Float
  y       Float
  r       Float
}

model Review {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  title     String
  review    String
  item      Item[]
  faq       String[]
  media     Media[]
  tags      Style[]
  focus     ReviewFocus @default(value: ITEM)
  status    Status      @default(value: PENDING)
  Comment   Comment[]
  slug      String
  published Boolean     @default(false)
  createdAt DateTime    @default(now()) @map(name: "created_at")
  updatedAt DateTime    @default(now()) @map(name: "updated_at")

  userId Int
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  user        User     @relation("adminGroup", fields: [userId], references: [id])
  links       String[]
  slug        String
  description String
  inviteonly  Boolean  @default(true)
  public      Boolean  @default(false)


  member     User[]       @relation("memberGroup")
  collection Collection[]
  Invite     Invite[]     @relation("inviteGroup")

  userId Int
  @@map(name: "groups")
}

model Invite {
  id           String      @id @default(uuid())
  email        String?
  user         User?       @relation(fields: [userId], references: [id])
  seen         Boolean     @default(false)
  done         Boolean     @default(false)
  collection   Collection? @relation("inviteCollection", fields: [collectionId], references: [id])
  group        Group?      @relation("inviteGroup", fields: [groupId], references: [id])
  collectionId Int?
  groupId      Int?
  userId       Int?
}

model Collection {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  fits        Fit[]
  title       String
  description String?
  slug        String
  public      Boolean @default(false)
  published   Boolean @default(false)
  oneperuser  Boolean @default(false)

  group     Group?   @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  tags      Style[]
  Battle    Battle[]
  Invite    Invite[] @relation("inviteCollection")
  groupId   Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  seen      Boolean  @default(false)
  content   String   @default(value: "")
  cta       String   @default(value: "")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  userId Int
}

model Battle {
  id          Int @id @default(autoincrement())
  roundLength Int @default(value: 24)

  rules       String
  type        BattleType @default(value: POPULAR)
  activeRound Int        @default(value: 0)
  winners     Fit[]
  archive     Boolean    @default(false)
  feature     Boolean    @default(false)

  user          User            @relation(fields: [userId], references: [id])
  judges        User[]          @relation(name: "battleJudges")
  collection    Collection      @relation(fields: [collectionId], references: [id])
  tags          Style[]
  Comment       Comment[]
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @default(now()) @map(name: "updated_at")
  BattleMatchup BattleMatchup[]
  userId        Int
  collectionId  Int
}

model BattleMatchup {
  id       String          @id @default(uuid())
  battle   Battle          @relation(fields: [battleId], references: [id])
  round    Int
  Fits     Fit[]
  parents  BattleMatchup[] @relation("BattleMatchupToBattleMatchup")
  votes    BattleVote[]
  battleId Int

  BattleMatchup   BattleMatchup? @relation("BattleMatchupToBattleMatchup", fields: [battleMatchupId], references: [id])
  battleMatchupId String?
}

model BattleVote {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  matchup   BattleMatchup @relation(fields: [battleMatchupId], references: [id])
  fit       Fit           @relation(fields: [fitId], references: [id])
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @default(now()) @map(name: "updated_at")
  comment   String

  userId          Int
  battleMatchupId String
  fitId           Int
}

enum ReviewFocus {
  ITEM
  STYLE
  FIT
}

enum ItemType {
  BAG
  SHOE
  JACKET
  PANT
  SHIRT
  LAYER
  EXTRA
}

enum Colour {
  aqua
  azure
  beige
  bisque
  blue
  brown
  coral
  crimson
  cyan
  darkred
  dimgray
  gold
  gray
  green
  grey
  hotpink
  indigo
  ivory
  khaki
  lime
  linen
  maroon
  navy
  oldlace
  olive
  orange
  orchid
  peru
  pink
  plum
  purple
  red
  salmon
  sienna
  silver
  skyblue
  snow
  tan
  teal
  thistle
  tomato
  violet
  wheat
  transparent
}

enum Qual {
  WATERPROOF
  BREATHABLE
}

enum Platform {
  INSTAGRAM
}

enum Status {
  PENDING
  PUBLIC
  FEATURED
  REPORTED
}

enum Gender {
  MALE
  FEMALE
  ANDRO
  QUEER
  INTER
  OTHER
}

enum BattleType {
  POPULAR
  PANEL
}
